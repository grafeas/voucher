package objects

import (
	"strings"

	"github.com/Shopify/voucher"
)

//VulnerabilitySeverity based on
//https://github.com/grafeas/client-go/blob/master/0.1.0/model_vulnerability_severity.go
type VulnerabilitySeverity string

//consts
const (
	SeverityUnspecified VulnerabilitySeverity = "SEVERITY_UNSPECIFIED"
	SeverityMinimal     VulnerabilitySeverity = "MINIMAL"
	SeverityLow         VulnerabilitySeverity = "LOW"
	SeverityMedium      VulnerabilitySeverity = "MEDIUM"
	SeverityHigh        VulnerabilitySeverity = "HIGH"
	SeverityCritical    VulnerabilitySeverity = "CRITICAL"
)

//Vulnerability based on
//https://github.com/grafeas/client-go/blob/master/0.1.0/model_vulnerability_vulnerability.go
type Vulnerability struct {
	CvssScore float32                `json:"cvssScore,omitempty"`
	Severity  *VulnerabilitySeverity `json:"severity,omitempty"`
}

//vulnerability for occurrence

//VulnerabilityDetails based on
//https://github.com/grafeas/client-go/blob/master/0.1.0/model_v1beta1vulnerability_details.go
type VulnerabilityDetails struct {
	Type              string                      `json:"type,omitempty"`
	Severity          *VulnerabilitySeverity      `json:"severity,omitempty"`         //output only
	CvssScore         float32                     `json:"cvssScore,omitempty"`        //output only
	PackageIssue      []VulnerabilityPackageIssue `json:"packageIssue,omitempty"`     //required
	ShortDescription  string                      `json:"shortDescription,omitempty"` //output only
	LongDescription   string                      `json:"longDescription,omitempty"`  //output only
	EffectiveSeverity *VulnerabilitySeverity      `json:"effectiveSeverity,omitempty"`
}

// AsVoucherVulnerability converts an VulnerabilityDetails to a Vulnerability.
func (vd *VulnerabilityDetails) AsVoucherVulnerability(noteName, vulProject string) (vul voucher.Vulnerability) {
	vul.Name = strings.Replace(noteName, vulProject, "", 1)

	vul.Severity = getSeverity(vd.Severity)
	packageIssues := vd.PackageIssue

	if vul.Severity == voucher.UnknownSeverity && len(packageIssues) > 0 {
		vul.Severity = getSeverity(vd.EffectiveSeverity)
	}

	return
}

// getSeverity translates the client-fo grafeas Severity to a Voucher Severity.
func getSeverity(severity *VulnerabilitySeverity) voucher.Severity {
	switch *severity {
	case SeverityMinimal:
		return voucher.NegligibleSeverity
	case SeverityLow:
		return voucher.LowSeverity
	case SeverityMedium:
		return voucher.MediumSeverity
	case SeverityHigh:
		return voucher.HighSeverity
	case SeverityCritical:
		return voucher.CriticalSeverity
	}
	return voucher.UnknownSeverity
}

//VulnerabilityPackageIssue based on
//https://github.com/grafeas/client-go/blob/master/0.1.0/model_vulnerability_package_issue.go
type VulnerabilityPackageIssue struct {
	AffectedLocation *VulnerabilityLocation `json:"affectedLocation,omitempty"` //required
	FixedLocation    *VulnerabilityLocation `json:"fixedLocation,omitempty"`
}

//VulnerabilityLocation based on
//https://github.com/grafeas/client-go/blob/master/0.1.0/model_vulnerability_vulnerability_location.go
type VulnerabilityLocation struct {
	CpeURI  string          `json:"cpeUri,omitempty"`  //required
	Package string          `json:"package,omitempty"` //required
	Version *PackageVersion `json:"version,omitempty"` //required
}
